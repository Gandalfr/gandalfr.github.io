{"meta":{"title":"Huasababy","subtitle":null,"description":null,"author":"Huasababy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"所有分类","date":"2019-10-16T17:55:25.531Z","updated":"2019-10-16T17:55:25.331Z","comments":true,"path":"blog/categories/index.html","permalink":"http://yoursite.com/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-10-16T17:56:09.800Z","updated":"2019-10-16T17:56:09.800Z","comments":true,"path":"blog/tags/index.html","permalink":"http://yoursite.com/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mac环境Hexo+Github搭建博客","slug":"Mac环境Hexo-Github搭建博客","date":"2019-10-16T09:55:52.000Z","updated":"2019-10-16T19:01:46.562Z","comments":true,"path":"2019/10/16/Mac环境Hexo-Github搭建博客/","link":"","permalink":"http://yoursite.com/2019/10/16/Mac环境Hexo-Github搭建博客/","excerpt":"文章主要记录了我是如何在Mac环境下，使用 Hexo+Github 搭建博客的…","text":"文章主要记录了我是如何在Mac环境下，使用 Hexo+Github 搭建博客的… 基本使用命令 hexo d -g 生成部署 hexo s -g 生成预览 hexo d 上传网页文件到github hexo new post &quot;article title&quot; 创建博文文件 命令详述 hexo server hexo s 启动本地服务,预览博客 hexo generate hexo g 生成博客网页文件 hexo deploy hexo d 上传网页文件到github hexo new ... hexo new post &quot;article name&quot; hexo new page &quot;page name&quot; hexo clean 搭建过程 安装node.js 安装git，并配置git账号信息 注册github账号并创建项目 注：项目名称必须为 github名称.github.io 在 项目-&gt;Settings-&gt;Source选择为 master branch 安装Hexo,并创建本地博客项目 创建博客维护文件夹，并切换至文件夹下 在控制台中进行操作 npm i hexo-cli -g 进行安装hexo hexo -v验证安装是否成功 hexo init初始化文件夹，注意要在你创建的博客维护文件夹下 npm install 安装必备的组件 hexo g生成静态页面 hexo s 打开本地服务器，http://localhost:4000/查看博客 连接Github与本地博客文件夹 修改博客文件夹根目录下 _config.yml文件 找到deploy进行修改 1234deploy: type: git repository: 项目Clone地址 branch: master 写文章与发布文章 安装扩展 npm i hexo-deployer-git hexo new post &quot;article title&quot; 新建一篇文章 在 博客目录\\source\\_posts 找到新建的文件进行编辑 hexo g 生成静态页面 hexo s 本地预览 hexo d 上传到github 安装node.js Mac下安装方式，参考文章[[Node.js]在mac上安装node.js](https://www.jianshu.com/p/3b30c4c846d1) 扩展1. 使用自己的域名 在 [local_blog_path]/source 新建 CNAME文件,填写自己的域名 在自己申请域名的网站，设置域名解析 2. 博客维护设备转移 多个设备如何同时维护一个博客 如何更换设备重新维护博客 3. 设置主题 Hexo 主题 中挑选主题 我使用的是 MatreialX 演示 主题 关于中查看详细使用方法 MaterialX curl -s https://xaoxuu.com/install | sh -s hexo.sh hexo.sh 使用文档 主题的修改是通过 _config.yml 文件夹下 theme: material-x 进行配置 博客目录/themes下放置各主题方案，配置文件中主题配置要与该目录下文件保持一致 标签 创建博客项目路径/source/blog/tags/index.md 12345---layout: tagindex: truetitle: 所有标签--- 创建的文章时，Front-matter中使用tags: [标签A, 标签B] 文章分类 创建博客项目路径/source/blog/categories/index.md 12345---layout: categoryindex: truetitle: 所有分类--- 创建的文章时，Front-matter中添加categories: [分类A, 分类B] categories 最近文章 npm i -S hexo-related-popular-posts 安装插件 列表中文章摘要 编写的文章中 使用&lt;!-- more --&gt;，该标记之前的信息会作为摘要展示 设置个人信息 参考文章:hexo官方文档超详细Hexo+Github博客搭建小白教程Hexo + GitHub (Coding) Pages 搭建博客Github搭建个人博客GitHub Pages自定义域名Hexo(2)-部署博客及更新博文我的个人博客之旅：从jekyll到hexo","categories":[{"name":"Other","slug":"Other","permalink":"http://yoursite.com/categories/Other/"}],"tags":[{"name":"Other","slug":"Other","permalink":"http://yoursite.com/tags/Other/"}]},{"title":"ndk开发流程","slug":"ndk开发流程","date":"2019-10-12T09:25:30.000Z","updated":"2019-10-16T18:46:42.657Z","comments":true,"path":"2019/10/12/ndk开发流程/","link":"","permalink":"http://yoursite.com/2019/10/12/ndk开发流程/","excerpt":"本文介绍了 Android 如何调用C/C++ 的native代码，比较基础。","text":"本文介绍了 Android 如何调用C/C++ 的native代码，比较基础。 资料NDK开发入门终极教程 Android 调用 C/C++ native代码 配置NDK AndroidStudio SDKManager中下载NDK相关工具 SDK路径下，找到ndk路径 旧版路径为 $SDK_PATH/ndk-bundle 新版路径为 $SDK_PATH/ndk/ndk_version ,新版本可切换不同版本 配置系统环境变量 mac下 /etc/profile PATH = $SDK_PATH/ndk-bundle source /etc/profile Android项目下创建调用native方法的类 声明native函数 加载native函数动态库 实现Android项目中类文件所声明的native方法 方式一 直接编写c/c++文件: 123456789101112131415161718192021222324252627282930//// Created by Yu. on 2019-10-12.//#include &lt;jni.h&gt;#include &lt;stdio.h&gt;#ifdef __cplusplusextern \"C\" &#123;#endifJNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashABRT(JNIEnv *env, jobject obj)&#123; printf(\"makeCrashABRT() execute..\"); return env-&gt;NewStringUTF(\"makeCrashABRT\");&#125;JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashSEGV(JNIEnv *env, jobject obj)&#123; printf(\"makeCrashSEGV() execute..\"); return env-&gt;NewStringUTF(\"makeCrashSEGV\");&#125;#ifdef __cplusplus&#125;#endif 方式二 先根据java源文件生成class文件，再使用class文件生成 .h头文件，利用头文件编写c/c++源文件 javac .../TestJNI.java -d ./bin 编译生成class文件 javah -jni -classpath ./bin -d ./jni com.study.jnilearn.TestJNI 生成头文件 编写源文件 123456789101112131415161718192021//// Created by Yu. on 2019-10-12.//#include \"com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest.h\"#include &lt;stdio.h&gt;JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashABRT(JNIEnv *env, jobject obj)&#123; printf(\"makeCrashABRT() execute..\"); return env-&gt;NewStringUTF(\"makeCrashABRT\");&#125;JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashSEGV(JNIEnv *env, jobject obj)&#123; printf(\"makeCrashSEGV() execute..\"); return env-&gt;NewStringUTF(\"makeCrashSEGV\");&#125; 准备生成so库的文件 创建jni文件夹 将第三步编写的源文件放入 在jni文件夹下创建Android.mk 12345678LOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE := ndk-crash-testLOCAL_SRC_FILES := test.cppinclude $(BUILD_SHARED_LIBRARY) 在jni文件夹下创建Applicaion.mk 12APP_PLATFORM := android-21APP_ABI := armeabi-v7a APP_ABI 表示使用的架构平台, Android可通过Build.SUPPORTED_ABIS查看支持的架构列表，列表从上到下为支持的好的顺序 APP_PLATFORM 表示编译使用的版本, 可在sdk/ndk-bundle/platform下查看版本 切换到jni目录的父目录，执行 ndk-build","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"http://yoursite.com/categories/Android/NDK/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"},{"name":"NDK","slug":"NDK","permalink":"http://yoursite.com/tags/NDK/"}]}]}