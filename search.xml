<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac环境Hexo+Github搭建博客</title>
      <link href="/2019/10/16/Mac%E7%8E%AF%E5%A2%83Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/16/Mac%E7%8E%AF%E5%A2%83Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>文章主要记录了我是如何在Mac环境下，使用 Hexo+Github 搭建博客的…</p><a id="more"></a><h2 id="基本使用命令"><a href="#基本使用命令" class="headerlink" title="基本使用命令"></a>基本使用命令</h2><ol><li><code>hexo d -g</code> 生成部署</li><li><code>hexo s -g</code> 生成预览</li><li><code>hexo d</code> 上传网页文件到github</li><li><code>hexo new post &quot;article title&quot;</code> 创建博文文件</li></ol><h3 id="命令详述"><a href="#命令详述" class="headerlink" title="命令详述"></a>命令详述</h3><ol><li><code>hexo server</code> <code>hexo s</code> 启动本地服务,预览博客</li><li><code>hexo generate</code> <code>hexo g</code> 生成博客网页文件</li><li><code>hexo deploy</code> <code>hexo d</code>  上传网页文件到github</li><li><code>hexo new ...</code><ul><li><code>hexo new post &quot;article name&quot;</code></li><li><code>hexo new page &quot;page name&quot;</code></li></ul></li><li><code>hexo clean</code></li></ol><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><ol><li><p><a href="#build_blog_1">安装node.js</a></p></li><li><p>安装git，并配置git账号信息</p></li><li><p>注册github账号并创建项目</p><ul><li><strong>注：</strong>项目名称必须为 github名称.github.io</li><li>在 <code>项目-&gt;Settings-&gt;Source</code>选择为 <code>master branch</code></li></ul></li><li><p>安装Hexo,并创建本地博客项目</p><ul><li>创建博客维护文件夹，并切换至文件夹下</li><li>在控制台中进行操作<ul><li><code>npm i hexo-cli -g</code> 进行安装hexo</li><li><code>hexo -v</code>验证安装是否成功</li><li><code>hexo init</code>初始化文件夹，注意要在你创建的博客维护文件夹下</li><li><code>npm install</code> 安装必备的组件</li><li><code>hexo g</code>生成静态页面</li><li><code>hexo s</code> 打开本地服务器，<code>http://localhost:4000/</code>查看博客</li></ul></li></ul></li><li><p>连接Github与本地博客文件夹</p><ul><li>修改博客文件夹根目录下 <code>_config.yml</code>文件</li><li>找到<code>deploy</code>进行修改  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: 项目Clone地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li></ul></li><li><p>写文章与发布文章</p><ul><li>安装扩展 <code>npm i hexo-deployer-git</code></li><li><code>hexo new post &quot;article title&quot;</code> 新建一篇文章</li><li>在 <code>博客目录\source\_posts</code> 找到新建的文件进行编辑</li><li><code>hexo g</code> 生成静态页面</li><li><code>hexo s</code> 本地预览</li><li><code>hexo d</code> 上传到github</li></ul></li></ol><h3 id="build_blog_1">安装node.js</h3>Mac下安装方式，参考文章[[Node.js]在mac上安装node.js](https://www.jianshu.com/p/3b30c4c846d1)<hr><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="1-使用自己的域名"><a href="#1-使用自己的域名" class="headerlink" title="1. 使用自己的域名"></a>1. 使用自己的域名</h3><ol><li>在 <code>[local_blog_path]/source</code> 新建 CNAME文件,填写自己的域名</li><li>在自己申请域名的网站，设置域名解析</li></ol><h3 id="2-博客维护设备转移"><a href="#2-博客维护设备转移" class="headerlink" title="2. 博客维护设备转移"></a>2. 博客维护设备转移</h3><ul><li>多个设备如何同时维护一个博客</li><li>如何更换设备重新维护博客</li></ul><h3 id="3-设置主题"><a href="#3-设置主题" class="headerlink" title="3. 设置主题"></a>3. 设置主题</h3><ol><li><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 主题</a> 中挑选主题</p></li><li><p>我使用的是 <a href="https://xaoxuu.com/" target="_blank" rel="noopener">MatreialX 演示</a> 主题</p><ul><li><p>关于中查看详细使用方法 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">MaterialX</a></p></li><li><p><code>curl -s https://xaoxuu.com/install | sh -s hexo.sh</code></p><ul><li><a href="https://xaoxuu.com/wiki/hexo.sh/" target="_blank" rel="noopener">hexo.sh 使用文档</a></li></ul></li><li><p>主题的修改是通过 <code>_config.yml</code> 文件夹下</p><ul><li><code>theme: material-x</code> 进行配置</li><li><code>博客目录/themes</code>下放置各主题方案，配置文件中主题配置要与该目录下文件保持一致</li></ul></li><li><p>标签</p><ul><li><p>创建<code>博客项目路径/source/blog/tags/index.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: tag</span><br><span class="line">index: true</span><br><span class="line">title: 所有标签</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>创建的文章时，<code>Front-matter</code>中使用<code>tags: [标签A, 标签B]</code></li></ul></li></ul></li><li><p>文章分类 </p><ul><li><p>创建<code>博客项目路径/source/blog/categories/index.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: category</span><br><span class="line">index: true</span><br><span class="line">title: 所有分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>创建的文章时，<code>Front-matter</code>中添加<code>categories: [分类A, 分类B]</code> <a href="https://xaoxuu.com/wiki/material-x/pages/index.html#文章分类" target="_blank" rel="noopener">categories</a></p></li></ul></li><li><p>最近文章</p><ul><li><code>npm i -S hexo-related-popular-posts</code> 安装插件</li></ul></li><li><p>列表中文章摘要</p><ul><li>编写的文章中 使用<code>&lt;!-- more --&gt;</code>，该标记之前的信息会作为摘要展示</li></ul></li><li><p>设置个人信息</p></li></ul></li></ol><hr><p>参考文章:<br><a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo官方文档</a><br><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-7" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a><br><a href="https://github.com/HarleyWang93/blog/issues/1" target="_blank" rel="noopener">Hexo + GitHub (Coding) Pages 搭建博客</a><br><a href="https://blog.csdn.net/xudailong_blog/article/details/78762262" target="_blank" rel="noopener">Github搭建个人博客</a><br><a href="https://juejin.im/post/5a71a4f9518825733a3105ac" target="_blank" rel="noopener">GitHub Pages自定义域名</a><br><a href="https://zhuanlan.zhihu.com/p/22498474" target="_blank" rel="noopener">Hexo(2)-部署博客及更新博文</a><br><a href="https://blog.csdn.net/u011475210/article/details/79023429" target="_blank" rel="noopener">我的个人博客之旅：从jekyll到hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ndk开发流程</title>
      <link href="/2019/10/12/ndk%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/10/12/ndk%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本文介绍了 Android 如何调用C/C++ 的native代码，比较基础。</p><a id="more"></a><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://juejin.im/post/5c3b01016fb9a049f81984bb" target="_blank" rel="noopener">NDK开发入门终极教程</a></p><h2 id="Android-调用-C-C-native代码"><a href="#Android-调用-C-C-native代码" class="headerlink" title="Android 调用 C/C++ native代码"></a>Android 调用 C/C++ native代码</h2><ol><li><p>配置NDK</p><ul><li>AndroidStudio SDKManager中下载NDK相关工具</li><li>SDK路径下，找到ndk路径<ul><li>旧版路径为 $SDK_PATH/ndk-bundle</li><li>新版路径为 $SDK_PATH/ndk/ndk_version ,新版本可切换不同版本</li></ul></li><li>配置系统环境变量<ul><li>mac下 <code>/etc/profile</code><ul><li><code>PATH = $SDK_PATH/ndk-bundle</code></li><li><code>source /etc/profile</code></li></ul></li></ul></li></ul></li><li><p>Android项目下创建调用native方法的类</p><ul><li>声明native函数</li><li>加载native函数动态库</li></ul></li><li><p>实现Android项目中类文件所声明的native方法</p><ul><li><p>方式一 直接编写c/c++文件:</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Yu. on 2019-10-12.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashABRT</span><br><span class="line">(JNIEnv *env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"makeCrashABRT() execute.."</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"makeCrashABRT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashSEGV</span><br><span class="line">(JNIEnv *env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"makeCrashSEGV() execute.."</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"makeCrashSEGV"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>方式二 先根据java源文件生成class文件，再使用class文件生成 .h头文件，利用头文件编写c/c++源文件</p><ul><li><code>javac .../TestJNI.java -d ./bin</code> 编译生成class文件</li><li><code>javah -jni -classpath ./bin -d ./jni com.study.jnilearn.TestJNI</code> 生成头文件</li><li>编写源文件  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Yu. on 2019-10-12.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashABRT</span><br><span class="line">(JNIEnv *env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"makeCrashABRT() execute.."</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"makeCrashABRT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_dayizhihui_dayishi_drugstore_feature_test_crash_JNICrashTest_makeCrashSEGV</span><br><span class="line">(JNIEnv *env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"makeCrashSEGV() execute.."</span>);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"makeCrashSEGV"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>准备生成so库的文件</p><ul><li><p>创建jni文件夹</p></li><li><p>将第三步编写的源文件放入</p></li><li><p>在jni文件夹下创建<code>Android.mk</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := ndk-crash-test</span><br><span class="line">LOCAL_SRC_FILES := test.cpp</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></li><li><p>在jni文件夹下创建<code>Applicaion.mk</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">APP_PLATFORM := android-21</span><br><span class="line">APP_ABI := armeabi-v7a</span><br></pre></td></tr></table></figure><ul><li>APP_ABI 表示使用的架构平台, Android可通过<code>Build.SUPPORTED_ABIS</code>查看支持的架构列表，列表从上到下为支持的好的顺序</li><li>APP_PLATFORM 表示编译使用的版本, 可在sdk/ndk-bundle/platform下查看版本</li></ul></li></ul></li><li><p>切换到jni目录的父目录，执行 <code>ndk-build</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
